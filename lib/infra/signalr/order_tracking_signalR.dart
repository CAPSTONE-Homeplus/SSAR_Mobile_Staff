// üì¶ Model: OrderTrackingSignalR (t√°ch ri√™ng t·ª´ SignalR)

class OrderTrackingSignalR {
  final String orderId;
  final Map<String, dynamic>? note;
  final DateTime? createdAt;

  OrderTrackingSignalR({
    required this.orderId,
    this.note,
    this.createdAt,
  });

  factory OrderTrackingSignalR.fromJson(Map<String, dynamic> json) {
    // Log to√†n b·ªô JSON ƒë·ªÉ debug
    print('Raw JSON: $json');

    // Th·ª≠ nhi·ªÅu tr∆∞·ªùng kh√°c nhau c√≥ th·ªÉ ch·ª©a ng√†y th√°ng
    DateTime? createdAt;

    // C√°ch 1: Tr·ª±c ti·∫øp t·ª´ tr∆∞·ªùng createdAt ho·∫∑c t∆∞∆°ng t·ª±
    if (json['CreatedAt'] != null) {
      try {
        createdAt = DateTime.parse(json['CreatedAt']);
      } catch (e) {
        print('Kh√¥ng th·ªÉ parse CreatedAt: ${json['CreatedAt']}');
      }
    }

    // C√°ch 2: T·ª´ tr∆∞·ªùng Time n·∫øu c√≥
    if (createdAt == null && json['Time'] != null) {
      try {
        createdAt = DateTime.parse(json['Time']);
      } catch (e) {
        print('Kh√¥ng th·ªÉ parse Time: ${json['Time']}');
      }
    }

    // C√°ch 3: N·∫øu c√≥ tr∆∞·ªùng Date ri√™ng
    if (createdAt == null && json['Date'] != null) {
      try {
        createdAt = DateTime.parse(json['Date']);
      } catch (e) {
        print('Kh√¥ng th·ªÉ parse Date: ${json['Date']}');
      }
    }

    return OrderTrackingSignalR(
      orderId: json['Id'] ?? '',
      // th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu c·∫ßn
      createdAt: createdAt,
    );
  }
}
